/* eslint-disable max-len */
// Generated by CodiumAI
import { mergeOpts } from "./mergeOpts";

describe("mergeOpts", () => {
  // Test that the function 'mergeOpts' correctly merges the defaultParams and inputParams and returns the merged object.
  it("should merge defaultParams and inputParams and return the merged object", () => {
    // Define defaultParams
    const defaultParams = {
      param1: "default value 1",
      param2: "default value 2",
    };
      // Define inputParams
    const inputParams = {
      param2: "input value 2",
      param3: "input value 3",
    };
      // Call mergeOpts with defaultParams and inputParams
    const result = mergeOpts(defaultParams, inputParams);

    // Check if the result is the merged object
    expect(result).toEqual( {
      param1: "default value 1",
      param2: "input value 2",
      param3: "input value 3",
    } );
  } );

  // Test that when inputParams is not defined, the function returns defaultParams.
  it("should return defaultParams when inputParams is not defined", () => {
    // Define defaultParams
    const defaultParams = {
      param1: "default1",
      param2: "default2",
    };
      // Call mergeOpts with undefined inputParams
    const result = mergeOpts(defaultParams);

    // Check that the result is equal to defaultParams
    expect(result).toEqual(defaultParams);
  } );

  // Test that when defaultParams is an empty object and inputParams is defined, the function returns inputParams.
  it("should return inputParams when defaultParams is an empty object and inputParams is defined", () => {
    const defaultParams = {};
    const inputParams = {
      param1: "value1",
      param2: "value2",
    };
    const result = mergeOpts(defaultParams, inputParams);

    expect(result).toEqual(inputParams);
  } );

  // Test that when defaultParams and inputParams are both empty objects, the function returns an empty object.
  it("should return an empty object when defaultParams and inputParams are both empty objects", () => {
    // Arrange
    const defaultParams = {};
    const inputParams = {};
    // Act
    const result = mergeOpts(defaultParams, inputParams);

    // Assert
    expect(result).toEqual( {} );
  } );

  // Test that the mergeOpts function prioritizes the values in inputParams over defaultParams when they have overlapping properties with different values
  it("should prioritize inputParams values over defaultParams values when they have overlapping properties", () => {
    // Define defaultParams and inputParams
    const defaultParams = {
      a: 1,
      b: 2,
    };
    const inputParams = {
      a: 3,
    };
      // Call mergeOpts with defaultParams and inputParams
    const result = mergeOpts(defaultParams, inputParams);

    // Check that the result has the value from inputParams for property 'a'
    expect(result.a).toBe(3);

    // Check that the result has the value from defaultParams for property 'b'
    expect(result.b).toBe(2);
  } );

  // Test that when inputParams has additional properties not present in defaultParams, the function includes them in the merged object.
  it("should include additional properties in the merged object when inputParams has additional properties", () => {
    const defaultParams = {
      a: 1,
      b: 2,
    };
    const inputParams = {
      a: 3,
      c: 4,
    };
    const expected = {
      a: 3,
      b: 2,
      c: 4,
    };
    const result = mergeOpts(defaultParams, inputParams);

    expect(result).toEqual(expected);
  } );

  // Test that when inputParams has properties with null or undefined values, the function includes them in the merged object.
  it("should include null or undefined properties in the merged object when inputParams has null or undefined values", () => {
    const defaultParams = {
      a: 1,
      b: 2,
    };
    const inputParams: object = {
      a: null,
      b: undefined,
    };
    const result = mergeOpts(defaultParams, inputParams);

    expect(result).toEqual( {
      a: null,
      b: undefined,
    } );
  } );

  // Test that when inputParams has properties with empty arrays or objects, the function includes them in the merged object.
  it("should include empty arrays or objects in the merged object when inputParams has them", () => {
    // Arrange
    const defaultParams = {
      prop1: "value1",
      prop2: [],
      prop3: {},
    };
    const inputParams = {
      prop2: [],
      prop3: {},
    };
      // Act
    const result = mergeOpts(defaultParams, inputParams);

    // Assert
    expect(result).toEqual( {
      prop1: "value1",
      prop2: [],
      prop3: {},
    } );
  } );

  it("should recursively merge properties with objects but not with non-empty arrays", () => {
    const defaultParams = {
      prop1: {
        arr: [1, 2, 3],
        obj: {
          a: 1,
          b: 2,
        },
      },
      prop2: {
        arr: [4, 5, 6],
        obj: {
          c: 3,
          d: 4,
        },
      },
    };
    const inputParams: object = {
      prop1: {
        arr: [7, 8],
        obj: {
          e: 5,
        },
      },
      prop2: {
        arr: [9],
        obj: {
          f: 6,
        },
      },
    };
    const expectedParams = {
      prop1: {
        arr: [7, 8],
        obj: {
          a: 1,
          b: 2,
          e: 5,
        },
      },
      prop2: {
        arr: [9],
        obj: {
          c: 3,
          d: 4,
          f: 6,
        },
      },
    };
    const mergedParams = mergeOpts(defaultParams, inputParams);

    expect(mergedParams).toEqual(expectedParams);
  } );
} );
